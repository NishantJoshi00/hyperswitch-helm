{{- if .Values.autoBuild }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sdk.fullname" . }}
  labels:
    {{- include "sdk.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "sdk.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "sdk.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "sdk.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "sdk.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: sdk-builder
          image: "{{ .Values.autoBuild.buildImage }}"
          command:
            - /bin/sh
            - -c
          #language=sh
          args:
            - |
              BUILD_COMPLETE_FILE="/dist/build_complete"
              FORCE_BUILD={{ .Values.autoBuild.forceBuild | default "false" }}
              if [ "$FORCE_BUILD" != "true" ] && [ -f "$BUILD_COMPLETE_FILE" ]; then
                echo "Build complete file exists, skipping build."
              else
                git clone --branch v{{ .Values.autoBuild.gitCloneParam.gitVersion }} {{ .Values.autoBuild.gitCloneParam.gitRepo }} /repo
                cd /repo
                npm install
                npm run re:build
                envSdkUrl={{ .Values.autoBuild.buildParam.envSdkUrl }} envBackendUrl={{ .Values.autoBuild.buildParam.envBackendUrl }} npm run build:{{.Values.autoBuild.buildParam.buildEnv}}
                cp -rfv /repo/dist/{{.Values.autoBuild.buildParam.buildEnv}}/* /dist
                touch "$BUILD_COMPLETE_FILE"
              fi
          volumeMounts:
            - name: build-storage
              mountPath: /dist
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.autoBuild.nginxConfig.image}}:{{ .Values.autoBuild.nginxConfig.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ include "nginx.sdk.path" . }}
              port: http
          readinessProbe:
            httpGet:
              path: {{ include "nginx.sdk.path" . }}
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            - name: build-storage
              mountPath: /usr/share/nginx/html/{{ .Values.autoBuild.gitCloneParam.gitVersion}}/{{.Values.autoBuild.nginxConfig.extraPath}}
            - name: nginx
              mountPath: /etc/nginx/conf.d
      volumes:
        - name: nginx
          configMap:
            name: {{ include "sdk.fullname" . }}-nginx
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: build-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
{{- end }}
