
# Analytics configuration.
[analytics]
source = "sqlx" # The Analytics source/strategy to be used

[analytics.sqlx]
pool_size = 5             # Number of connections to keep open
connection_timeout = 10   # Timeout for database connection in seconds
queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client

[connector_onboarding.paypal]
enabled = true # boolean

[connector_request_reference_id_config]
merchant_ids_send_payment_id_as_connector_request_id = [
    "merchant_id_1",
    "merchant_id_2",
    "etc.,",
]

[cors]
max_age = 30                            # Maximum time (in seconds) for which this CORS request may be cached.
origins = "http://localhost:8080"       # List of origins that are allowed to make requests.
allowed_methods = "GET,POST,PUT,DELETE" # List of methods that are allowed
wildcard_origin = false                 # If true, allows any origin to make requests

# EmailClient configuration. Only applicable when the `email` feature flag is enabled.
[email]
sender_email = "example@example.com" # Sender email
aws_region = ""                      # AWS region used by AWS SES
base_url = ""                        # Dashboard base url used when adding links that should redirect to self, say https://app.hyperswitch.io for example
allowed_unverified_days = 1          # Number of days the api calls ( with jwt token ) can be made without verifying the email
active_email_client = "SES"          # The currently active email client

[events]
source = "logs" # The event sink to push events supports kafka or logs (stdout)

[events.kafka]
brokers = []                          # Kafka broker urls for bootstrapping the client
intent_analytics_topic = "topic"      # Kafka topic to be used for PaymentIntent events
attempt_analytics_topic = "topic"     # Kafka topic to be used for PaymentAttempt events
refund_analytics_topic = "topic"      # Kafka topic to be used for Refund events
api_logs_topic = "topic"              # Kafka topic to be used for incoming api events
connector_logs_topic = "topic"        # Kafka topic to be used for connector api events
outgoing_webhook_logs_topic = "topic" # Kafka topic to be used for outgoing webhook events
dispute_analytics_topic = "topic"     # Kafka topic to be used for Dispute events
audit_events_topic = "topic"          # Kafka topic to be used for Payment Audit events
payout_analytics_topic = "topic"      # Kafka topic to be used for Payouts and PayoutAttempt events

[forex_api]
call_delay = 21600                # Api calls are made after every 6 hrs
local_fetch_retry_count = 5       # Fetch from Local cache has retry count as 5
local_fetch_retry_delay = 1000    # Retry delay for checking write condition
api_timeout = 20000               # Api timeouts once it crosses 20000 ms
redis_lock_timeout = 26000        # Redis remains write locked for 26000 ms once the acquire_redis_lock is called

[log.console]
enabled = true
level = "DEBUG"
log_format = "json"

[log.file]
level = "DEBUG"
log_format = "json"

[log.telemetry]
traces_enabled = false                                # boolean [true or false], whether traces are enabled
metrics_enabled = false                               # boolean [true or false], whether metrics are enabled
ignore_errors = false                                 # boolean [true or false], whether to ignore errors during traces or metrics pipeline setup
sampling_rate = 0.1                                   # decimal rate between 0.0 - 1.0
otel_exporter_otlp_timeout = 5000                     # timeout (in milliseconds) for sending metrics and traces
use_xray_generator = false                            # Set this to true for AWS X-ray compatible traces
route_to_trace = ["*/confirm"]

[lock_settings]
delay_between_retries_in_milliseconds = 500 # Delay between retries in milliseconds
redis_lock_expiry_seconds = 180             # Seconds before the redis lock expires

[master_database]
pool_size = "20"
connection_timeout = 10   
queue_strategy = "Fifo"

[payment_method_auth]
redis_expiry = 900          # Redis expiry time in milliseconds

[redis]
host = "redis.com"
port = 6379
pool_size = 5 # Number of connections to keep open
reconnect_max_attempts = 5 # Maximum number of reconnection attempts to make before failing. Set to 0 to retry forever.
reconnect_delay = 5 # Delay between reconnection attempts, in milliseconds
default_ttl = 300 # Default TTL for entries, in seconds
default_hash_ttl = 900 # Default TTL for hashes entries, in seconds
use_legacy_version = false # RESP protocol for fred crate (set this to true if using RESPv2 or redis version < 6)
stream_read_count = 1 # Default number of entries to read from stream if not provided in stream read options
auto_pipeline = true # Whether or not the client should automatically pipeline commands across tasks when possible.
disable_auto_backpressure = false # Whether or not to disable the automatic backpressure features when pipelining is enabled.
max_in_flight_commands = 5000 # The maximum number of in-flight commands (per connection) before backpressure will be applied.
default_command_timeout = 30 # An optional timeout to apply to all commands. In seconds
unresponsive_timeout = 10 # An optional timeout for Unresponsive commands in seconds. This should be less than default_command_timeout.
max_feed_count = 200 # The maximum number of frames that will be fed to a socket before flushing.
cluster_enabled = false # boolean
cluster_urls = [
    "redis.cluster.uri-1:8080",
    "redis.cluster.uri-2:4115",
] # List of redis cluster urls

[replica_database]
pool_size = "20"
connection_timeout = 10   # Timeout for database connection in seconds
queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client

[opensearch.auth]
auth = "basic"
username = "admin"
password = "admin"
region = "eu-central-1"

[opensearch.indexes]
payment_attempts = "hyperswitch-payment-attempt-events"
payment_intents = "hyperswitch-payment-intent-events"
refunds = "hyperswitch-refund-events"
disputes = "hyperswitch-dispute-events"

[report_download_config]
dispute_function = "report_download_config_dispute_function" # Config to download dispute report
payment_function = "report_download_config_payment_function" # Config to download payment report
refund_function = "report_download_config_refund_function"   # Config to download refund report
region = "report_download_config_region"    

[server]
port = 8080
host = "0.0.0.0"
request_body_limit = 32_768 # Post request body is limited to 16k
shutdown_timeout = 30
workers = 8
